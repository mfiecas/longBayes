// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;
using namespace arma;

// rcpparma_hello_world
arma::mat rcpparma_hello_world();
RcppExport SEXP _longBayes_rcpparma_hello_world() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(rcpparma_hello_world());
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_outerproduct
arma::mat rcpparma_outerproduct(const arma::colvec& x);
RcppExport SEXP _longBayes_rcpparma_outerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_outerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_innerproduct
double rcpparma_innerproduct(const arma::colvec& x);
RcppExport SEXP _longBayes_rcpparma_innerproduct(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_innerproduct(x));
    return rcpp_result_gen;
END_RCPP
}
// rcpparma_bothproducts
Rcpp::List rcpparma_bothproducts(const arma::colvec& x);
RcppExport SEXP _longBayes_rcpparma_bothproducts(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rcpparma_bothproducts(x));
    return rcpp_result_gen;
END_RCPP
}
// bases
mat bases(int J);
RcppExport SEXP _longBayes_bases(SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(bases(J));
    return rcpp_result_gen;
END_RCPP
}
// pg
vec pg(vec ts);
RcppExport SEXP _longBayes_pg(SEXP tsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type ts(tsSEXP);
    rcpp_result_gen = Rcpp::wrap(pg(ts));
    return rcpp_result_gen;
END_RCPP
}
// lpg
vec lpg(vec ts);
RcppExport SEXP _longBayes_lpg(SEXP tsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type ts(tsSEXP);
    rcpp_result_gen = Rcpp::wrap(lpg(ts));
    return rcpp_result_gen;
END_RCPP
}
// nsp
vec nsp(vec spec, double TR);
RcppExport SEXP _longBayes_nsp(SEXP specSEXP, SEXP TRSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type spec(specSEXP);
    Rcpp::traits::input_parameter< double >::type TR(TRSEXP);
    rcpp_result_gen = Rcpp::wrap(nsp(spec, TR));
    return rcpp_result_gen;
END_RCPP
}
// atsm
vec atsm(vec pgram);
RcppExport SEXP _longBayes_atsm(SEXP pgramSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type pgram(pgramSEXP);
    rcpp_result_gen = Rcpp::wrap(atsm(pgram));
    return rcpp_result_gen;
END_RCPP
}
// mcmc
mat mcmc(vec y, vec eta, vec q, double leps, uword L, double lepsrho, uword Lrho, uword niter, double Ltau, double siga, double sigmu);
RcppExport SEXP _longBayes_mcmc(SEXP ySEXP, SEXP etaSEXP, SEXP qSEXP, SEXP lepsSEXP, SEXP LSEXP, SEXP lepsrhoSEXP, SEXP LrhoSEXP, SEXP niterSEXP, SEXP LtauSEXP, SEXP sigaSEXP, SEXP sigmuSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< vec >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< double >::type leps(lepsSEXP);
    Rcpp::traits::input_parameter< uword >::type L(LSEXP);
    Rcpp::traits::input_parameter< double >::type lepsrho(lepsrhoSEXP);
    Rcpp::traits::input_parameter< uword >::type Lrho(LrhoSEXP);
    Rcpp::traits::input_parameter< uword >::type niter(niterSEXP);
    Rcpp::traits::input_parameter< double >::type Ltau(LtauSEXP);
    Rcpp::traits::input_parameter< double >::type siga(sigaSEXP);
    Rcpp::traits::input_parameter< double >::type sigmu(sigmuSEXP);
    rcpp_result_gen = Rcpp::wrap(mcmc(y, eta, q, leps, L, lepsrho, Lrho, niter, Ltau, siga, sigmu));
    return rcpp_result_gen;
END_RCPP
}
// q_lspec
mat q_lspec(vec q, int J);
RcppExport SEXP _longBayes_q_lspec(SEXP qSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< vec >::type q(qSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(q_lspec(q, J));
    return rcpp_result_gen;
END_RCPP
}
// mc_q
vec mc_q(mat mcsamp, int J, int burn);
RcppExport SEXP _longBayes_mc_q(SEXP mcsampSEXP, SEXP JSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type mcsamp(mcsampSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(mc_q(mcsamp, J, burn));
    return rcpp_result_gen;
END_RCPP
}
// lspec
mat lspec(mat mcsamp, int J, int burn);
RcppExport SEXP _longBayes_lspec(SEXP mcsampSEXP, SEXP JSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type mcsamp(mcsampSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(lspec(mcsamp, J, burn));
    return rcpp_result_gen;
END_RCPP
}
// tsl_mc
mat tsl_mc(mat tsl, int J);
RcppExport SEXP _longBayes_tsl_mc(SEXP tslSEXP, SEXP JSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type tsl(tslSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    rcpp_result_gen = Rcpp::wrap(tsl_mc(tsl, J));
    return rcpp_result_gen;
END_RCPP
}
// tsl_q
vec tsl_q(mat tsl, int J, int burn);
RcppExport SEXP _longBayes_tsl_q(SEXP tslSEXP, SEXP JSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type tsl(tslSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(tsl_q(tsl, J, burn));
    return rcpp_result_gen;
END_RCPP
}
// lspl
mat lspl(mat tsl, int J, int burn);
RcppExport SEXP _longBayes_lspl(SEXP tslSEXP, SEXP JSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type tsl(tslSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(lspl(tsl, J, burn));
    return rcpp_result_gen;
END_RCPP
}
// spl
mat spl(mat tsl, int J, int burn);
RcppExport SEXP _longBayes_spl(SEXP tslSEXP, SEXP JSEXP, SEXP burnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< mat >::type tsl(tslSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type burn(burnSEXP);
    rcpp_result_gen = Rcpp::wrap(spl(tsl, J, burn));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_longBayes_rcpparma_hello_world", (DL_FUNC) &_longBayes_rcpparma_hello_world, 0},
    {"_longBayes_rcpparma_outerproduct", (DL_FUNC) &_longBayes_rcpparma_outerproduct, 1},
    {"_longBayes_rcpparma_innerproduct", (DL_FUNC) &_longBayes_rcpparma_innerproduct, 1},
    {"_longBayes_rcpparma_bothproducts", (DL_FUNC) &_longBayes_rcpparma_bothproducts, 1},
    {"_longBayes_bases", (DL_FUNC) &_longBayes_bases, 1},
    {"_longBayes_pg", (DL_FUNC) &_longBayes_pg, 1},
    {"_longBayes_lpg", (DL_FUNC) &_longBayes_lpg, 1},
    {"_longBayes_nsp", (DL_FUNC) &_longBayes_nsp, 2},
    {"_longBayes_atsm", (DL_FUNC) &_longBayes_atsm, 1},
    {"_longBayes_mcmc", (DL_FUNC) &_longBayes_mcmc, 11},
    {"_longBayes_q_lspec", (DL_FUNC) &_longBayes_q_lspec, 2},
    {"_longBayes_mc_q", (DL_FUNC) &_longBayes_mc_q, 3},
    {"_longBayes_lspec", (DL_FUNC) &_longBayes_lspec, 3},
    {"_longBayes_tsl_mc", (DL_FUNC) &_longBayes_tsl_mc, 2},
    {"_longBayes_tsl_q", (DL_FUNC) &_longBayes_tsl_q, 3},
    {"_longBayes_lspl", (DL_FUNC) &_longBayes_lspl, 3},
    {"_longBayes_spl", (DL_FUNC) &_longBayes_spl, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_longBayes(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
